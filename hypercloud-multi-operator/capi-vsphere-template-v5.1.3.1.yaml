apiVersion: tmax.io/v1
categories:
- CAPI
imageUrl: https://blogs.vmware.com/vsphere/files/2021/02/VMware-vSphere-Blog-Images-vSphere.jpg
kind: ClusterTemplate
metadata:
  name: capi-vsphere-template
objectKinds:
- Cluster
- VSphereCluster
- VSphereMachineTemplate
- VSphereMachineTemplate
- KubeadmControlPlane
- KubeadmConfigTemplate
- MachineDeployment
- ClusterResourceSet
- Secret
- Secret
- ConfigMap
- ConfigMap
- Secret
- ConfigMap
- ConfigMap
- ConfigMap
- Secret
- Secret
- ConfigMap
objects:
- apiVersion: cluster.x-k8s.io/v1beta1
  kind: Cluster
  metadata:
    labels:
      cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    annotations:
      owner: ${OWNER}
    name: '${CLUSTER_NAME}'
    namespace: '${NAMESPACE}'
  spec:
    clusterNetwork:
      pods:
        cidrBlocks:
        - ${POD_CIDR}
    controlPlaneRef:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlane
      name: '${CLUSTER_NAME}-control-plane'
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: VSphereCluster
      name: '${CLUSTER_NAME}'
- apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
  kind: VSphereCluster
  metadata:
    name: '${CLUSTER_NAME}'
    namespace: '${NAMESPACE}'
  spec:
    controlPlaneEndpoint:
      host: ${CONTROL_PLANE_ENDPOINT_IP}
      port: 6443
    identityRef:
      kind: Secret
      name: '${CLUSTER_NAME}'
    server: '${VSPHERE_SERVER}'
    thumbprint: '${VSPHERE_TLS_THUMBPRINT}'
- apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
  kind: VSphereMachineTemplate
  metadata:
    name: '${CLUSTER_NAME}'
    namespace: '${NAMESPACE}'
  spec:
    template:
      spec:
        cloneMode: linkedClone
        datacenter: '${VSPHERE_DATACENTER}'
        datastore: '${VSPHERE_DATASTORE}'
        diskGiB: ${MASTER_DISK_SIZE}
        folder: '${VSPHERE_FOLDER}'
        memoryMiB: ${MASTER_MEM_SIZE}
        network:
          devices:
          - dhcp4: true
            networkName: '${VSPHERE_NETWORK}'
        numCPUs: ${MASTER_CPU_NUM}
        os: Linux
        resourcePool: '${VSPHERE_RESOURCE_POOL}'
        server: '${VSPHERE_SERVER}'
        storagePolicyName: ''
        template: '${VSPHERE_TEMPLATE}'
        thumbprint: '${VSPHERE_TLS_THUMBPRINT}'
- apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
  kind: VSphereMachineTemplate
  metadata:
    name: ${CLUSTER_NAME}-worker
    namespace: '${NAMESPACE}'
  spec:
    template:
      spec:
        cloneMode: linkedClone
        datacenter: '${VSPHERE_DATACENTER}'
        datastore: '${VSPHERE_DATASTORE}'
        diskGiB: ${WORKER_DISK_SIZE}
        folder: '${VSPHERE_FOLDER}'
        memoryMiB: ${WORKER_MEM_SIZE}
        network:
          devices:
          - dhcp4: true
            networkName: '${VSPHERE_NETWORK}'
        numCPUs: ${WORKER_CPU_NUM}
        os: Linux
        resourcePool: '${VSPHERE_RESOURCE_POOL}'
        server: '${VSPHERE_SERVER}'
        storagePolicyName: ''
        template: '${VSPHERE_TEMPLATE}'
        thumbprint: '${VSPHERE_TLS_THUMBPRINT}'
- apiVersion: controlplane.cluster.x-k8s.io/v1beta1
  kind: KubeadmControlPlane
  metadata:
    name: '${CLUSTER_NAME}-control-plane'
    namespace: '${NAMESPACE}'
  spec:
    kubeadmConfigSpec:
      clusterConfiguration:
        apiServer:
          extraArgs:
            cloud-provider: external
        controllerManager:
          extraArgs:
            cloud-provider: external
      files:
      - content: |
          apiVersion: v1
          kind: Pod
          metadata:
            creationTimestamp: null
            name: kube-vip
            namespace: kube-system
          spec:
            containers:
            - args:
              - manager
              env:
              - name: cp_enable
                value: "true"
              - name: vip_interface
                value: ""
              - name: address
                value: ${CONTROL_PLANE_ENDPOINT_IP}
              - name: port
                value: "6443"
              - name: vip_arp
                value: "true"
              - name: vip_leaderelection
                value: "true"
              - name: vip_leaseduration
                value: "15"
              - name: vip_renewdeadline
                value: "10"
              - name: vip_retryperiod
                value: "2"
              image: ghcr.io/kube-vip/kube-vip:v0.5.5
              imagePullPolicy: IfNotPresent
              name: kube-vip
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - NET_RAW
              volumeMounts:
              - mountPath: /etc/kubernetes/admin.conf
                name: kubeconfig
            hostAliases:
            - hostnames:
              - kubernetes
              ip: 127.0.0.1
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/admin.conf
                type: FileOrCreate
              name: kubeconfig
          status: {}
        owner: root:root
        path: /etc/kubernetes/manifests/kube-vip.yaml
      initConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: '{{ ds.meta_data.hostname }}'
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: '{{ ds.meta_data.hostname }}'
      preKubeadmCommands:
      - hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
      - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
      - echo 'root:${VM_PASSWORD}' | chpasswd
      - sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
      - systemctl restart sshd
      # - echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."registry-1.docker.io".auth]' >> /etc/containerd/config.toml
      # - echo '  username = "dockerhub ID"' >> /etc/containerd/config.toml
      # - echo '  password = "dockerhub PW"' >> /etc/containerd/config.toml
      # - systemctl restart containerd
      postKubeadmCommands:
      - mkdir -p $HOME/.kube
      - cp /etc/kubernetes/admin.conf $HOME/.kube/config
      - chown $USER:$USER $HOME/.kube/config
      - kubectl apply -f https://docs.projectcalico.org/archive/v3.16/manifests/calico.yaml
      - sed -i 's/--bind-address=127.0.0.1/--bind-address=0.0.0.0/g' /etc/kubernetes/manifests/kube-controller-manager.yaml || echo
      - sed -i 's/--bind-address=127.0.0.1/--bind-address=0.0.0.0/g' /etc/kubernetes/manifests/kube-scheduler.yaml || echo
      - sed -i "s/--listen-metrics-urls=http:\/\/127.0.0.1:2381/--listen-metrics-urls=http:\/\/127.0.0.1:2381,http:\/\/{{ ds.meta_data.local_ipv4 }}:2381/g" /etc/kubernetes/manifests/etcd.yaml || echo
      users:
      - name: root
        sshAuthorizedKeys:
        - ''
        # sudo: ALL=(ALL) NOPASSWD:ALL
    machineTemplate:
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        name: '${CLUSTER_NAME}'
    replicas: ${CONTROL_PLANE_MACHINE_COUNT}
    version: '${KUBERNETES_VERSION}'
- apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
  kind: KubeadmConfigTemplate
  metadata:
    name: '${CLUSTER_NAME}-md-0'
    namespace: '${NAMESPACE}'
  spec:
    template:
      spec:
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
            name: '{{ ds.meta_data.hostname }}'
        preKubeadmCommands:
        - hostname "{{ ds.meta_data.hostname }}"
        - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
        - echo "127.0.0.1   localhost" >>/etc/hosts
        - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
        - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
        - echo 'root:${VM_PASSWORD}' | chpasswd
        - sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        - systemctl restart sshd
        # - echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."registry-1.docker.io".auth]' >> /etc/containerd/config.toml
        # - echo '  username = "dockerhub ID"' >> /etc/containerd/config.toml
        # - echo '  password = "dockerhub PW"' >> /etc/containerd/config.toml
        # - systemctl restart containerd
        users:
        - name: root
          sshAuthorizedKeys:
          - ''
          # sudo: ALL=(ALL) NOPASSWD:ALL
- apiVersion: cluster.x-k8s.io/v1beta1
  kind: MachineDeployment
  metadata:
    labels:
      cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    name: '${CLUSTER_NAME}-md-0'
    namespace: '${NAMESPACE}'
  spec:
    clusterName: '${CLUSTER_NAME}'
    replicas: ${WORKER_MACHINE_COUNT}
    selector:
      matchLabels: {}
    template:
      metadata:
        labels:
          cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
      spec:
        bootstrap:
          configRef:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: '${CLUSTER_NAME}-md-0'
        clusterName: '${CLUSTER_NAME}'
        infrastructureRef:
          apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
          kind: VSphereMachineTemplate
          name: ${CLUSTER_NAME}-worker
        version: '${KUBERNETES_VERSION}'
- apiVersion: addons.cluster.x-k8s.io/v1beta1
  kind: ClusterResourceSet
  metadata:
    labels:
      cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    name: ${CLUSTER_NAME}-crs-0
    namespace: '${NAMESPACE}'
  spec:
    clusterSelector:
      matchLabels:
        cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    resources:
    - kind: Secret
      name: ${CLUSTER_NAME}-vsphere-csi-controller
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-controller-role
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-controller-binding
    - kind: Secret
      name: ${CLUSTER_NAME}-csi-vsphere-config
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-csi.vsphere.vmware.com
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-node
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-controller
    - kind: Secret
      name: ${CLUSTER_NAME}-cloud-controller-manager
    - kind: Secret
      name: ${CLUSTER_NAME}-cloud-provider-vsphere-credentials
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-cpi-manifests
- apiVersion: v1
  kind: Secret
  metadata:
    name: '${CLUSTER_NAME}'
    namespace: '${NAMESPACE}'
  stringData:
    password: ${VSPHERE_PASSWORD}
    username: ${VSPHERE_USERNAME}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller
    namespace: '${NAMESPACE}'
  stringData:
    data: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: vsphere-csi-controller
        namespace: kube-system
  type: addons.cluster.x-k8s.io/resource-set
- apiVersion: v1
  data:
    data: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: vsphere-csi-controller-role
      rules:
      - apiGroups:
        - storage.k8s.io
        resources:
        - csidrivers
        verbs:
        - create
        - delete
      - apiGroups:
        - ""
        resources:
        - nodes
        - pods
        - secrets
        - configmaps
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - persistentvolumes
        verbs:
        - get
        - list
        - watch
        - update
        - create
        - delete
        - patch
      - apiGroups:
        - storage.k8s.io
        resources:
        - volumeattachments
        verbs:
        - get
        - list
        - watch
        - update
        - patch
      - apiGroups:
        - storage.k8s.io
        resources:
        - volumeattachments/status
        verbs:
        - patch
      - apiGroups:
        - ""
        resources:
        - persistentvolumeclaims
        verbs:
        - get
        - list
        - watch
        - update
      - apiGroups:
        - storage.k8s.io
        resources:
        - storageclasses
        - csinodes
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - list
        - watch
        - create
        - update
        - patch
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - get
        - watch
        - list
        - delete
        - update
        - create
      - apiGroups:
        - snapshot.storage.k8s.io
        resources:
        - volumesnapshots
        verbs:
        - get
        - list
      - apiGroups:
        - snapshot.storage.k8s.io
        resources:
        - volumesnapshotcontents
        verbs:
        - get
        - list
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller-role
    namespace: '${NAMESPACE}'
- apiVersion: v1
  data:
    data: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: vsphere-csi-controller-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: vsphere-csi-controller-role
      subjects:
      - kind: ServiceAccount
        name: vsphere-csi-controller
        namespace: kube-system
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller-binding
    namespace: '${NAMESPACE}'
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-csi-vsphere-config
    namespace: '${NAMESPACE}'
  stringData:
    data: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: csi-vsphere-config
        namespace: kube-system
      stringData:
        csi-vsphere.conf: |+
          [Global]
          cluster-id = "${NAMESPACE}/${CLUSTER_NAME}"
          insecure-flag = "1"
          
          [VirtualCenter "${VSPHERE_SERVER}"]
          user = "${VSPHERE_USERNAME}"
          password = "${VSPHERE_PASSWORD}"
          datacenters = "${VSPHERE_DATACENTER}"

          [Network]
          public-network = "${VSPHERE_NETWORK}"

      type: Opaque
  type: addons.cluster.x-k8s.io/resource-set
- apiVersion: v1
  data:
    data: |
      apiVersion: storage.k8s.io/v1
      kind: CSIDriver
      metadata:
        name: csi.vsphere.vmware.com
      spec:
        attachRequired: true
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-csi.vsphere.vmware.com
    namespace: '${NAMESPACE}'
- apiVersion: v1
  data:
    data: |
      apiVersion: apps/v1
      kind: DaemonSet
      metadata:
        name: vsphere-csi-node
        namespace: kube-system
      spec:
        selector:
          matchLabels:
            app: vsphere-csi-node
        template:
          metadata:
            labels:
              app: vsphere-csi-node
              role: vsphere-csi
          spec:
            containers:
            - args:
              - --v=5
              - --csi-address=$(ADDRESS)
              - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
              env:
              - name: ADDRESS
                value: /csi/csi.sock
              - name: DRIVER_REG_SOCK_PATH
                value: /var/lib/kubelet/plugins/csi.vsphere.vmware.com/csi.sock
              image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
              lifecycle:
                preStop:
                  exec:
                    command:
                    - /bin/sh
                    - -c
                    - rm -rf /registration/csi.vsphere.vmware.com-reg.sock /csi/csi.sock
              name: node-driver-registrar
              resources: {}
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /csi
                name: plugin-dir
              - mountPath: /registration
                name: registration-dir
            - env:
              - name: CSI_ENDPOINT
                value: unix:///csi/csi.sock
              - name: X_CSI_MODE
                value: node
              - name: X_CSI_SPEC_REQ_VALIDATION
                value: "false"
              - name: VSPHERE_CSI_CONFIG
                value: /etc/cloud/csi-vsphere.conf
              - name: LOGGER_LEVEL
                value: PRODUCTION
              - name: X_CSI_LOG_LEVEL
                value: INFO
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              image: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.1.0
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 3
              name: vsphere-csi-node
              ports:
              - containerPort: 9808
                name: healthz
                protocol: TCP
              resources: {}
              securityContext:
                allowPrivilegeEscalation: true
                capabilities:
                  add:
                  - SYS_ADMIN
                privileged: true
              volumeMounts:
              - mountPath: /etc/cloud
                name: vsphere-config-volume
              - mountPath: /csi
                name: plugin-dir
              - mountPath: /var/lib/kubelet
                mountPropagation: Bidirectional
                name: pods-mount-dir
              - mountPath: /dev
                name: device-dir
            - args:
              - --csi-address=/csi/csi.sock
              image: quay.io/k8scsi/livenessprobe:v2.1.0
              name: liveness-probe
              resources: {}
              volumeMounts:
              - mountPath: /csi
                name: plugin-dir
            dnsPolicy: Default
            tolerations:
            - effect: NoSchedule
              operator: Exists
            - effect: NoExecute
              operator: Exists
            volumes:
            - name: vsphere-config-volume
              secret:
                secretName: csi-vsphere-config
            - hostPath:
                path: /var/lib/kubelet/plugins_registry
                type: Directory
              name: registration-dir
            - hostPath:
                path: /var/lib/kubelet/plugins/csi.vsphere.vmware.com/
                type: DirectoryOrCreate
              name: plugin-dir
            - hostPath:
                path: /var/lib/kubelet
                type: Directory
              name: pods-mount-dir
            - hostPath:
                path: /dev
              name: device-dir
        updateStrategy:
          type: RollingUpdate
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-node
    namespace: '${NAMESPACE}'
- apiVersion: v1
  data:
    data: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: vsphere-csi-controller
        namespace: kube-system
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: vsphere-csi-controller
        template:
          metadata:
            labels:
              app: vsphere-csi-controller
              role: vsphere-csi
          spec:
            containers:
            - args:
              - --v=4
              - --timeout=300s
              - --csi-address=$(ADDRESS)
              - --leader-election
              env:
              - name: ADDRESS
                value: /csi/csi.sock
              image: quay.io/k8scsi/csi-attacher:v3.0.0
              name: csi-attacher
              resources: {}
              volumeMounts:
              - mountPath: /csi
                name: socket-dir
            - env:
              - name: CSI_ENDPOINT
                value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
              - name: X_CSI_MODE
                value: controller
              - name: VSPHERE_CSI_CONFIG
                value: /etc/cloud/csi-vsphere.conf
              - name: LOGGER_LEVEL
                value: PRODUCTION
              - name: X_CSI_LOG_LEVEL
                value: INFO
              image: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.1.0
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 3
              name: vsphere-csi-controller
              ports:
              - containerPort: 9808
                name: healthz
                protocol: TCP
              resources: {}
              volumeMounts:
              - mountPath: /etc/cloud
                name: vsphere-config-volume
                readOnly: true
              - mountPath: /var/lib/csi/sockets/pluginproxy/
                name: socket-dir
            - args:
              - --csi-address=$(ADDRESS)
              env:
              - name: ADDRESS
                value: /var/lib/csi/sockets/pluginproxy/csi.sock
              image: quay.io/k8scsi/livenessprobe:v2.1.0
              name: liveness-probe
              resources: {}
              volumeMounts:
              - mountPath: /var/lib/csi/sockets/pluginproxy/
                name: socket-dir
            - args:
              - --leader-election
              env:
              - name: X_CSI_FULL_SYNC_INTERVAL_MINUTES
                value: "30"
              - name: LOGGER_LEVEL
                value: PRODUCTION
              - name: VSPHERE_CSI_CONFIG
                value: /etc/cloud/csi-vsphere.conf
              image: gcr.io/cloud-provider-vsphere/csi/release/syncer:v2.1.0
              name: vsphere-syncer
              resources: {}
              volumeMounts:
              - mountPath: /etc/cloud
                name: vsphere-config-volume
                readOnly: true
            - args:
              - --v=4
              - --timeout=300s
              - --csi-address=$(ADDRESS)
              - --leader-election
              - --default-fstype=ext4
              env:
              - name: ADDRESS
                value: /csi/csi.sock
              image: quay.io/k8scsi/csi-provisioner:v2.0.0
              name: csi-provisioner
              resources: {}
              volumeMounts:
              - mountPath: /csi
                name: socket-dir
            dnsPolicy: Default
            serviceAccountName: vsphere-csi-controller
            tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Exists
            volumes:
            - name: vsphere-config-volume
              secret:
                secretName: csi-vsphere-config
            - emptyDir: {}
              name: socket-dir
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller
    namespace: '${NAMESPACE}'
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-cloud-controller-manager
    namespace: '${NAMESPACE}'
  stringData:
    data: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: cloud-controller-manager
        namespace: kube-system
  type: addons.cluster.x-k8s.io/resource-set
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-cloud-provider-vsphere-credentials
    namespace: '${NAMESPACE}'
  stringData:
    data: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: cloud-provider-vsphere-credentials
        namespace: kube-system
      stringData:
        ${VSPHERE_SERVER}.password: ${VSPHERE_PASSWORD}
        ${VSPHERE_SERVER}.username: ${VSPHERE_USERNAME}
      type: Opaque
  type: addons.cluster.x-k8s.io/resource-set
- apiVersion: v1
  data:
    data: |
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: system:cloud-controller-manager
      rules:
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - create
        - patch
        - update
      - apiGroups:
        - ""
        resources:
        - nodes
        verbs:
        - '*'
      - apiGroups:
        - ""
        resources:
        - nodes/status
        verbs:
        - patch
      - apiGroups:
        - ""
        resources:
        - services
        verbs:
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ""
        resources:
        - serviceaccounts
        verbs:
        - create
        - get
        - list
        - watch
        - update
      - apiGroups:
        - ""
        resources:
        - persistentvolumes
        verbs:
        - get
        - list
        - watch
        - update
      - apiGroups:
        - ""
        resources:
        - endpoints
        verbs:
        - create
        - get
        - list
        - watch
        - update
      - apiGroups:
        - ""
        resources:
        - secrets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - get
        - watch
        - list
        - delete
        - update
        - create
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: system:cloud-controller-manager
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:cloud-controller-manager
      subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
      - kind: User
        name: cloud-controller-manager
      ---
      apiVersion: v1
      data:
        vsphere.conf: |
          global:
            secretName: cloud-provider-vsphere-credentials
            secretNamespace: kube-system
            thumbprint: '${VSPHERE_TLS_THUMBPRINT}'
          vcenter:
            ${VSPHERE_SERVER}:
              datacenters:
              - '${VSPHERE_DATACENTER}'
              secretName: cloud-provider-vsphere-credentials
              secretNamespace: kube-system
              server: '${VSPHERE_SERVER}'
              thumbprint: '${VSPHERE_TLS_THUMBPRINT}'
      kind: ConfigMap
      metadata:
        name: vsphere-cloud-config
        namespace: kube-system
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: servicecatalog.k8s.io:apiserver-authentication-reader
        namespace: kube-system
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: extension-apiserver-authentication-reader
      subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
      - kind: User
        name: cloud-controller-manager
      ---
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          component: cloud-controller-manager
        name: cloud-controller-manager
        namespace: kube-system
      spec:
        ports:
        - port: 443
          protocol: TCP
          targetPort: 43001
        selector:
          component: cloud-controller-manager
        type: NodePort
      ---
      apiVersion: apps/v1
      kind: DaemonSet
      metadata:
        labels:
          k8s-app: vsphere-cloud-controller-manager
        name: vsphere-cloud-controller-manager
        namespace: kube-system
      spec:
        selector:
          matchLabels:
            k8s-app: vsphere-cloud-controller-manager
        template:
          metadata:
            labels:
              k8s-app: vsphere-cloud-controller-manager
          spec:
            containers:
            - args:
              - --v=2
              - --cloud-provider=vsphere
              - --cloud-config=/etc/cloud/vsphere.conf
              image: gcr.io/cloud-provider-vsphere/cpi/release/manager:v1.18.1
              name: vsphere-cloud-controller-manager
              resources:
                requests:
                  cpu: 200m
              volumeMounts:
              - mountPath: /etc/cloud
                name: vsphere-config-volume
                readOnly: true
            hostNetwork: true
            serviceAccountName: cloud-controller-manager
            tolerations:
            - effect: NoSchedule
              key: node.cloudprovider.kubernetes.io/uninitialized
              value: "true"
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
            - effect: NoSchedule
              key: node.kubernetes.io/not-ready
            volumes:
            - configMap:
                name: vsphere-cloud-config
              name: vsphere-config-volume
        updateStrategy:
          type: RollingUpdate
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-cpi-manifests
    namespace: '${NAMESPACE}'
parameters:
- description: namespace
  displayName: Namespace
  name: NAMESPACE
  required: false
  value: default
  valueType: string
- description: Cluster Owner
  displayName: Owner
  name: OWNER
  required: false
  value: admin
  valueType: string
- description: Cluster Name
  displayName: Cluster Name
  name: CLUSTER_NAME
  required: false
  value: clustername
  valueType: string
- description: Internal IP Cidr Block for Pods
  displayName: Cidr Block
  name: POD_CIDR
  required: false
  value: 0.0.0.0/0
  valueType: string
- description: vCenter Server IP
  displayName: VCSA IP
  name: VSPHERE_SERVER
  required: false
  value: 0.0.0.0
  valueType: string
- description: vCenter User Name
  displayName: User Name
  name: VSPHERE_USERNAME
  required: false
  value: example@domain.local
  valueType: string
- description: vCenter User Password
  displayName: User Password
  name: VSPHERE_PASSWORD
  required: false
  value: password
  valueType: string
- description: vCenter TLS Thumbprint
  displayName: Thumbprint
  name: VSPHERE_TLS_THUMBPRINT
  required: false
  value: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
  valueType: string
- description: vCenter Network Name
  displayName: Network Name
  name: VSPHERE_NETWORK
  required: false
  value: VM Network
  valueType: string
- description: vCenter DataCenter Name
  displayName: DataCenter Name
  name: VSPHERE_DATACENTER
  required: false
  value: Datacenter
  valueType: string
- description: vCenter DataStore Name
  displayName: DataStore Name
  name: VSPHERE_DATASTORE
  required: false
  value: datastore1
  valueType: string
- description: vCenter Folder Name
  displayName: Folder Name
  name: VSPHERE_FOLDER
  required: false
  value: vm
  valueType: string
- description: vCenter Resource Pool Name
  displayName: Resource Pool Name
  name: VSPHERE_RESOURCE_POOL
  required: false
  value: VM Resource
  valueType: string
- description: Master VM Disk Size
  displayName: Master Disk Size
  name: MASTER_DISK_SIZE
  required: false
  value: 25
  valueType: number
- description: Master VM Memory Size
  displayName: Master Memory Size
  name: MASTER_MEM_SIZE
  required: false
  value: 8192
  valueType: number
- description: Master Number of CPUs
  displayName: Master Number of CPUs
  name: MASTER_CPU_NUM
  required: false
  value: 2
  valueType: number
- description: Worker Number of CPUs
  displayName: Worker Number of CPUs
  name: WORKER_CPU_NUM
  required: false
  value: 2
  valueType: number
- description: Worker VM Disk Size
  displayName: Worker Disk Size
  name: WORKER_DISK_SIZE
  required: false
  value: 25
  valueType: number
- description: Worker VM Memory Size
  displayName: Worker Memory Size
  name: WORKER_MEM_SIZE
  required: false
  value: 8192
  valueType: number
- description: Target Template Name
  displayName: Template Name
  name: VSPHERE_TEMPLATE
  required: false
  value: ubuntu-1804-kube-v1.17.3
  valueType: string
- description: Control Plane Endpoint IP
  displayName: Control Plane Endpoint IP
  name: CONTROL_PLANE_ENDPOINT_IP
  required: false
  value: 0.0.0.0
  valueType: string
- description: Kubernetes version
  displayName: Kubernetes version
  name: KUBERNETES_VERSION
  required: false
  value: v1.18.16
  valueType: string
- description: Number of Master node
  displayName: number of master nodes
  name: CONTROL_PLANE_MACHINE_COUNT
  required: false
  value: 3
  valueType: number
- description: Number of Worker node
  displayName: number of worker nodes
  name: WORKER_MACHINE_COUNT
  required: false
  value: 2
  valueType: number
- description: Password of VM
  displayName: Password of VM
  name: VM_PASSWORD
  required: false
  value: dG1heEAyMw==
  valueType: string
# - description: HyperAuth url for open id connect
#   displayName: HyperAuth URL
#   name: HYPERAUTH_URL
#   required: false
#   value: hyperauth.tmax.co.kr
#   valueType: string
recommend: true
shortDescription: Cluster template for CAPI provider vSphere
urlDescription: ""
---
# cluster upgrade용 vspheremachinetemplate
apiVersion: tmax.io/v1
categories:
- CAPI
imageUrl: https://blogs.vmware.com/vsphere/files/2021/02/VMware-vSphere-Blog-Images-vSphere.jpg
kind: ClusterTemplate
metadata:
  name: capi-vsphere-upgrade-template
objectKinds:
- VSphereMachineTemplate
objects:
- apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
  kind: VSphereMachineTemplate
  metadata:
    name: '${UPGRADE_TEMPLATE_NAME}'
    namespace: '${NAMESPACE}'
  spec:
    template:
      spec:
        cloneMode: linkedClone
        datacenter: '${VSPHERE_DATACENTER}'
        datastore: '${VSPHERE_DATASTORE}'
        diskGiB: ${DISK_SIZE}
        folder: '${VSPHERE_FOLDER}'
        memoryMiB: ${MEM_SIZE}
        network:
          devices:
          - dhcp4: true
            networkName: '${VSPHERE_NETWORK}'
        numCPUs: ${CPU_NUM}
        os: Linux
        resourcePool: '${VSPHERE_RESOURCE_POOL}'
        server: '${VSPHERE_SERVER}'
        storagePolicyName: '${VSPHERE_STORAGE_POLICY}'
        template: '${VSPHERE_TEMPLATE}'
        thumbprint: '${VSPHERE_TLS_THUMBPRINT}'
parameters:
- description: namespace
  displayName: Namespace
  name: NAMESPACE
  required: false
  value: default
  valueType: string
- description: upgrade template name
  displayName: upgrade template name
  name: UPGRADE_TEMPLATE_NAME
  required: false
  value: upgrade_template_name
  valueType: string
- description: vCenter Server IP
  displayName: VCSA IP
  name: VSPHERE_SERVER
  required: false
  value: 0.0.0.0
  valueType: string
- description: vCenter TLS Thumbprint
  displayName: Thumbprint
  name: VSPHERE_TLS_THUMBPRINT
  required: false
  value: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
  valueType: string
- description: vCenter Network Name
  displayName: Network Name
  name: VSPHERE_NETWORK
  required: false
  value: VM Network
  valueType: string
- description: vCenter DataCenter Name
  displayName: DataCenter Name
  name: VSPHERE_DATACENTER
  required: false
  value: Datacenter
  valueType: string
- description: vCenter DataStore Name
  displayName: DataStore Name
  name: VSPHERE_DATASTORE
  required: false
  value: datastore1
  valueType: string
- description: vCenter Folder Name
  displayName: Folder Name
  name: VSPHERE_FOLDER
  required: false
  value: vm
  valueType: string
- description: vCenter Resource Pool Name
  displayName: Resource Pool Name
  name: VSPHERE_RESOURCE_POOL
  required: false
  value: VM Resource
  valueType: string
- description: VM Disk Size
  displayName: Disk Size
  name: DISK_SIZE
  required: false
  value: 25
  valueType: number
- description: VM Memory Size
  displayName: Memory Size
  name: MEM_SIZE
  required: false
  value: 8192
  valueType: number
- description: Number of CPUs
  displayName: Number of CPUs
  name: CPU_NUM
  required: false
  value: 2
  valueType: number
- description: Target Template Name
  displayName: Template Name
  name: VSPHERE_TEMPLATE
  required: false
  value: ubuntu-1804-kube-v1.19.6
  valueType: string
- description: Kubernetes version
  displayName: Kubernetes version
  name: KUBERNETES_VERSION
  required: false
  value: v1.19.6
  valueType: string
recommend: true
shortDescription: Cluster template for CAPI provider vSphere upgrade
urlDescription: ""
---
# k8s 1.19용 cluster template
apiVersion: tmax.io/v1
categories:
- CAPI
imageUrl: https://blogs.vmware.com/vsphere/files/2021/02/VMware-vSphere-Blog-Images-vSphere.jpg
kind: ClusterTemplate
metadata:
  name: capi-vsphere-template-v1.19
objectKinds:
- Cluster
- VSphereCluster
- VSphereMachineTemplate
- KubeadmControlPlane
- KubeadmConfigTemplate
- MachineDeployment
- ClusterResourceSet
- Secret
- ConfigMap
- ConfigMap
- Secret
- ConfigMap
- ConfigMap
- ConfigMap
- ConfigMap
objects:
- apiVersion: cluster.x-k8s.io/v1alpha3
  kind: Cluster
  metadata:
    labels:
      cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    annotations:
      federation: join
      owner: ${OWNER}
    name: '${CLUSTER_NAME}'
    namespace: '${NAMESPACE}'
  spec:
    clusterNetwork:
      pods:
        cidrBlocks:
        - ${POD_CIDR}
    controlPlaneRef:
      apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
      kind: KubeadmControlPlane
      name: '${CLUSTER_NAME}-control-plane'
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
      kind: VSphereCluster
      name: '${CLUSTER_NAME}'
- apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
  kind: VSphereCluster
  metadata:
    name: '${CLUSTER_NAME}'
    namespace: '${NAMESPACE}'
  spec:
    cloudProviderConfiguration:
      global:
        secretName: cloud-provider-vsphere-credentials
        secretNamespace: kube-system
        thumbprint: ${VSPHERE_TLS_THUMBPRINT}
      network:
        name: '${VSPHERE_NETWORK}'
      providerConfig:
        cloud:
          controllerImage: gcr.io/cloud-provider-vsphere/cpi/release/manager:v1.18.1
      virtualCenter:
        ${VSPHERE_SERVER}:
          datacenters: '${VSPHERE_DATACENTER}'
          thumbprint: ${VSPHERE_TLS_THUMBPRINT}
      workspace:
        datacenter: '${VSPHERE_DATACENTER}'
        datastore: '${VSPHERE_DATASTORE}'
        folder: '${VSPHERE_FOLDER}'
        resourcePool: '${VSPHERE_RESOURCE_POOL}'
        server: '${VSPHERE_SERVER}'
    controlPlaneEndpoint:
      host: ${CONTROL_PLANE_ENDPOINT_IP}
      port: 6443
    server: '${VSPHERE_SERVER}'
    thumbprint: ${VSPHERE_TLS_THUMBPRINT}
- apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
  kind: VSphereMachineTemplate
  metadata:
    name: '${CLUSTER_NAME}'
    namespace: '${NAMESPACE}'
  spec:
    template:
      spec:
        cloneMode: linkedClone
        datacenter: '${VSPHERE_DATACENTER}'
        datastore: '${VSPHERE_DATASTORE}'
        diskGiB: ${MASTER_DISK_SIZE}
        folder: '${VSPHERE_FOLDER}'
        memoryMiB: ${MASTER_MEM_SIZE}
        network:
          devices:
          - dhcp4: true
            networkName: '${VSPHERE_NETWORK}'
        numCPUs: ${MASTER_CPU_NUM}
        resourcePool: '${VSPHERE_RESOURCE_POOL}'
        server: '${VSPHERE_SERVER}'
        template: '${VSPHERE_TEMPLATE}'
        thumbprint: ${VSPHERE_TLS_THUMBPRINT}
- apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
  kind: KubeadmControlPlane
  metadata:
    name: '${CLUSTER_NAME}-control-plane'
    namespace: '${NAMESPACE}'
    labels:
      cluster.tmax.io/cluster-name: '${CLUSTER_NAME}'
      cluster.tmax.io/controlplane: controlplane
  spec:
    infrastructureTemplate:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
      kind: VSphereMachineTemplate
      name: '${CLUSTER_NAME}'
    kubeadmConfigSpec:
      clusterConfiguration:
        apiServer:
          extraArgs:
            # audit-policy-file: /etc/kubernetes/pki/audit-policy.yaml
            # audit-webhook-config-file: /etc/kubernetes/pki/audit-webhook-config
            # audit-webhook-mode: batch
            cloud-provider: external
            # oidc-ca-file: /etc/kubernetes/pki/hyperauth.crt
            # oidc-client-id: hypercloud5
            # oidc-groups-claim: group
            # oidc-issuer-url: ${HyperAuthUrl}
            # oidc-username-claim: preferred_username
            # oidc-username-prefix: '-'
        controllerManager:
          extraArgs:
            cloud-provider: external
      files:
      - content: |
          apiVersion: v1
          kind: Pod
          metadata:
            creationTimestamp: null
            name: kube-vip
            namespace: kube-system
          spec:
            containers:
            - args:
              - start
              env:
              - name: vip_arp
                value: "true"
              - name: vip_leaderelection
                value: "true"
              - name: vip_address
                value: ${CONTROL_PLANE_ENDPOINT_IP}
              - name: vip_interface
                value: eth0
              - name: vip_leaseduration
                value: "15"
              - name: vip_renewdeadline
                value: "10"
              - name: vip_retryperiod
                value: "2"
              image: plndr/kube-vip:0.3.2
              imagePullPolicy: IfNotPresent
              name: kube-vip
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - SYS_TIME
              volumeMounts:
              - mountPath: /etc/kubernetes/admin.conf
                name: kubeconfig
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/admin.conf
                type: FileOrCreate
              name: kubeconfig
          status: {}
        owner: root:root
        path: /etc/kubernetes/manifests/kube-vip.yaml
      # - content: |
      #     ${HyperAuthCert}
      #   owner: root:root
      #   path: /etc/kubernetes/pki/hyperauth.crt
      #   permissions: "0644"
      # - content: |
      #     apiVersion: v1
      #     kind: Config
      #     clusters:
      #     - cluster:
      #         certificate-authority-data: ${AUDIT_WEBHOOK_CA_CERT}
      #         server: ${AUDIT_WEBHOOK_SERVER_PATH}
      #       name: audit-webhook-service
      #     contexts:
      #     - context:
      #         cluster: audit-webhook-service
      #       name: audit-webhook-context
      #     current-context: audit-webhook-context
      #   owner: root:root
      #   path: /etc/kubernetes/pki/audit-webhook-config
      #   permissions: "0644"
      # - content: |
      #     apiVersion: audit.k8s.io/v1 # This is required.
      #     kind: Policy
      #     omitStages:
      #       - "ResponseStarted"
      #       - "RequestReceived"
      #     rules:

      #       # Don't log system requests.
      #       - level: None
      #         userGroups: ["system:serviceaccounts:hypercloud5-system", "system:nodes", "system:serviceaccounts", "system:masters"]
              
      #       # Don't log requests by hypercloud5-admin and kube-system user.
      #       - level: None
      #         users: ["system:serviceaccount:hypercloud5-system:hypercloud5-admin", "system:kube-controller-manager", "system:kube-scheduler", "system:apiserver"]
              
      #       # Don't log watch and get request
      #       - level: None
      #         verbs: ["watch", "get", "list"]
              
      #       # Log the request body of configmap changes in kube-system.
      #       - level: Metadata
      #         resources:
      #         # k8s resource
      #         - group: ""
      #         - group: "admissionregistration.k8s.io"
      #         - group: "apiextensions.k8s.io"
      #         - group: "apiregistration.k8s.io"
      #         - group: "apps"
      #         - group: "autoscaling"
      #         - group: "rbac.authorization.k8s.io"
      #         - group: "batch"
      #         - group: "servicecatalog.k8s.io"
      #         - group: "storage.k8s.io"
      #         - group: "policy"
      #         # storage
      #         - group: "ceph.rook.io"
      #         # istio
      #         - group: "authentication.istio.io"
      #         - group: "config.istio.io"
      #         - group: "networking.istio.io"
      #         - group: "rbac.istio.io"
      #         - group: "security.istio.io"
      #         # tmax.io
      #         - group: "tmax.io"
      #         - group: "claim.tmax.io"
      #         - group: "cluster.tmax.io"
      #         - group: "console.tmax.io"
      #         - group: "cicd.tmax.io"
      #         - group: "cicdapi.tmax.io"
      #         - group: "helmapi.tmax.io"
      #         # cicd
      #         - group: "tekton.dev"
      #         - group: "triggers.tekton.dev"
      #         # multi cluster
      #         - group: "types.kubefed.io"
      #         - group: "core.kubefed.io"
      #         - group: "cluster.x-k8s.io"
      #         - group: "addons.cluster.x-k8s.io"
      #         - group: "exp.cluster.x-k8s.io"
      #         - group: "bootstrap.cluster.x-k8s.io"
      #         - group: "controlplane.cluster.x-k8s.io"
      #         - group: "infrastructure.cluster.x-k8s.io"
      #         - group: "multiclusterdns.kubefed.io"
      #         - group: "scheduling.kubefed.io"
      #         # hyperframe
      #         - group: "kafka.strimzi.io"
      #         - group: "redis.redis.opstreelabs.in"
      #         # ML
      #         - group: "kubeflow.org"
      #         - group: "serving.kubeflow.org"
      #         # etc
      #         - group: "binding.operators.coreos.com"
            
      #       # Don't log others.
      #       - level: None
      #   owner: root:root
      #   path: /etc/kubernetes/pki/audit-policy.yaml
      #   permissions: "0644"
      initConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: '{{ ds.meta_data.hostname }}'
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
          name: '{{ ds.meta_data.hostname }}'
      preKubeadmCommands:
      - hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
      - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
      - echo 'root:${VM_PASSWORD}' | chpasswd
      - sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
      - systemctl restart sshd
      # - echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."registry-1.docker.io".auth]' >> /etc/containerd/config.toml
      # - echo '  username = "dockerhub ID"' >> /etc/containerd/config.toml
      # - echo '  password = "dockerhub PW"' >> /etc/containerd/config.toml
      # - systemctl restart containerd
      postKubeadmCommands:
      - mkdir -p $HOME/.kube
      - cp /etc/kubernetes/admin.conf $HOME/.kube/config
      - chown $USER:$USER $HOME/.kube/config
      - kubectl apply -f https://docs.projectcalico.org/archive/v3.16/manifests/calico.yaml
      - sed -i 's/--bind-address=127.0.0.1/--bind-address=0.0.0.0/g' /etc/kubernetes/manifests/kube-controller-manager.yaml || echo
      - sed -i 's/--bind-address=127.0.0.1/--bind-address=0.0.0.0/g' /etc/kubernetes/manifests/kube-scheduler.yaml || echo
      - sed -i "s/--listen-metrics-urls=http:\/\/127.0.0.1:2381/--listen-metrics-urls=http:\/\/127.0.0.1:2381,http:\/\/{{ ds.meta_data.local_ipv4 }}:2381/g" /etc/kubernetes/manifests/etcd.yaml || echo
      useExperimentalRetryJoin: true
      users:
      - name: root
        sshAuthorizedKeys:
        - ''
        # sudo: ALL=(ALL) NOPASSWD:ALL
    replicas: ${CONTROL_PLANE_MACHINE_COUNT}
    version: '${KUBERNETES_VERSION}'
- apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
  kind: KubeadmConfigTemplate
  metadata:
    name: '${CLUSTER_NAME}-md-0'
    namespace: '${NAMESPACE}'
  spec:
    template:
      spec:
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
            name: '{{ ds.meta_data.hostname }}'
        preKubeadmCommands:
        - hostname "{{ ds.meta_data.hostname }}"
        - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
        - echo "127.0.0.1   localhost" >>/etc/hosts
        - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
        - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
        - echo 'root:${VM_PASSWORD}' | chpasswd
        - sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
        - systemctl restart sshd
        # - echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."registry-1.docker.io".auth]' >> /etc/containerd/config.toml
        # - echo '  username = "dockerhub ID"' >> /etc/containerd/config.toml
        # - echo '  password = "dockerhub PW"' >> /etc/containerd/config.toml
        # - systemctl restart containerd
        users:
        - name: root
          sshAuthorizedKeys:
          - ''
          # sudo: ALL=(ALL) NOPASSWD:ALL
- apiVersion: cluster.x-k8s.io/v1alpha3
  kind: MachineDeployment
  metadata:
    labels:
      cluster.tmax.io/cluster-name: '${CLUSTER_NAME}'
      cluster.tmax.io/worker: worker
    name: '${CLUSTER_NAME}-md-0'
    namespace: '${NAMESPACE}'
  spec:
    clusterName: '${CLUSTER_NAME}'
    replicas: ${WORKER_MACHINE_COUNT}
    selector:
      matchLabels: {}
    template:
      metadata:
        labels:
          cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
      spec:
        bootstrap:
          configRef:
            apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
            kind: KubeadmConfigTemplate
            name: '${CLUSTER_NAME}-md-0'
        clusterName: '${CLUSTER_NAME}'
        infrastructureRef:
          apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
          kind: VSphereMachineTemplate
          name: '${CLUSTER_NAME}'
        version: '${KUBERNETES_VERSION}'
- apiVersion: addons.cluster.x-k8s.io/v1alpha3
  kind: ClusterResourceSet
  metadata:
    labels:
      cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    name: ${CLUSTER_NAME}-crs-0
    namespace: '${NAMESPACE}'
  spec:
    clusterSelector:
      matchLabels:
        cluster.x-k8s.io/cluster-name: '${CLUSTER_NAME}'
    resources:
    - kind: Secret
      name: ${CLUSTER_NAME}-vsphere-csi-controller
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-controller-role
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-controller-binding
    - kind: Secret
      name: ${CLUSTER_NAME}-csi-vsphere-config
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-csi.vsphere.vmware.com
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-node
    - kind: ConfigMap
      name: ${CLUSTER_NAME}-vsphere-csi-controller
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller
    namespace: '${NAMESPACE}'
  stringData:
    data: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: vsphere-csi-controller
        namespace: kube-system
  type: addons.cluster.x-k8s.io/resource-set
- apiVersion: v1
  data:
    data: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: vsphere-csi-controller-role
      rules:
      - apiGroups:
        - storage.k8s.io
        resources:
        - csidrivers
        verbs:
        - create
        - delete
      - apiGroups:
        - ""
        resources:
        - nodes
        - pods
        - secrets
        - configmaps
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - persistentvolumes
        verbs:
        - get
        - list
        - watch
        - update
        - create
        - delete
        - patch
      - apiGroups:
        - storage.k8s.io
        resources:
        - volumeattachments
        verbs:
        - get
        - list
        - watch
        - update
        - patch
      - apiGroups:
        - storage.k8s.io
        resources:
        - volumeattachments/status
        verbs:
        - patch
      - apiGroups:
        - ""
        resources:
        - persistentvolumeclaims
        verbs:
        - get
        - list
        - watch
        - update
      - apiGroups:
        - storage.k8s.io
        resources:
        - storageclasses
        - csinodes
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - list
        - watch
        - create
        - update
        - patch
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - get
        - watch
        - list
        - delete
        - update
        - create
      - apiGroups:
        - snapshot.storage.k8s.io
        resources:
        - volumesnapshots
        verbs:
        - get
        - list
      - apiGroups:
        - snapshot.storage.k8s.io
        resources:
        - volumesnapshotcontents
        verbs:
        - get
        - list
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller-role
    namespace: '${NAMESPACE}'
- apiVersion: v1
  data:
    data: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: vsphere-csi-controller-binding
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: vsphere-csi-controller-role
      subjects:
      - kind: ServiceAccount
        name: vsphere-csi-controller
        namespace: kube-system
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller-binding
    namespace: '${NAMESPACE}'
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-csi-vsphere-config
    namespace: '${NAMESPACE}'
  stringData:
    data: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: csi-vsphere-config
        namespace: kube-system
      stringData:
        csi-vsphere.conf: |+
          [Global]
          cluster-id = "${NAMESPACE}/${CLUSTER_NAME}"
          [VirtualCenter "${VSPHERE_SERVER}"]
          insecure-flag = "true"
          user = "${VSPHERE_USERNAME}"
          password = "${VSPHERE_PASSWORD}"
          datacenters = "${VSPHERE_DATACENTER}"
          [Network]
          public-network = "${VSPHERE_NETWORK}"
      type: Opaque
  type: addons.cluster.x-k8s.io/resource-set
- apiVersion: v1
  data:
    data: |
      apiVersion: storage.k8s.io/v1
      kind: CSIDriver
      metadata:
        name: csi.vsphere.vmware.com
      spec:
        attachRequired: true
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-csi.vsphere.vmware.com
    namespace: '${NAMESPACE}'
- apiVersion: v1
  data:
    data: |
      apiVersion: apps/v1
      kind: DaemonSet
      metadata:
        name: vsphere-csi-node
        namespace: kube-system
      spec:
        selector:
          matchLabels:
            app: vsphere-csi-node
        template:
          metadata:
            labels:
              app: vsphere-csi-node
              role: vsphere-csi
          spec:
            containers:
            - args:
              - --v=5
              - --csi-address=$(ADDRESS)
              - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
              env:
              - name: ADDRESS
                value: /csi/csi.sock
              - name: DRIVER_REG_SOCK_PATH
                value: /var/lib/kubelet/plugins/csi.vsphere.vmware.com/csi.sock
              image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
              lifecycle:
                preStop:
                  exec:
                    command:
                    - /bin/sh
                    - -c
                    - rm -rf /registration/csi.vsphere.vmware.com-reg.sock /csi/csi.sock
              name: node-driver-registrar
              resources: {}
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /csi
                name: plugin-dir
              - mountPath: /registration
                name: registration-dir
            - env:
              - name: CSI_ENDPOINT
                value: unix:///csi/csi.sock
              - name: X_CSI_MODE
                value: node
              - name: X_CSI_SPEC_REQ_VALIDATION
                value: "false"
              - name: VSPHERE_CSI_CONFIG
                value: /etc/cloud/csi-vsphere.conf
              - name: LOGGER_LEVEL
                value: PRODUCTION
              - name: X_CSI_LOG_LEVEL
                value: INFO
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              image: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.1.0
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 3
              name: vsphere-csi-node
              ports:
              - containerPort: 9808
                name: healthz
                protocol: TCP
              resources: {}
              securityContext:
                allowPrivilegeEscalation: true
                capabilities:
                  add:
                  - SYS_ADMIN
                privileged: true
              volumeMounts:
              - mountPath: /etc/cloud
                name: vsphere-config-volume
              - mountPath: /csi
                name: plugin-dir
              - mountPath: /var/lib/kubelet
                mountPropagation: Bidirectional
                name: pods-mount-dir
              - mountPath: /dev
                name: device-dir
            - args:
              - --csi-address=/csi/csi.sock
              image: quay.io/k8scsi/livenessprobe:v2.1.0
              name: liveness-probe
              resources: {}
              volumeMounts:
              - mountPath: /csi
                name: plugin-dir
            dnsPolicy: Default
            tolerations:
            - effect: NoSchedule
              operator: Exists
            - effect: NoExecute
              operator: Exists
            volumes:
            - name: vsphere-config-volume
              secret:
                secretName: csi-vsphere-config
            - hostPath:
                path: /var/lib/kubelet/plugins_registry
                type: Directory
              name: registration-dir
            - hostPath:
                path: /var/lib/kubelet/plugins/csi.vsphere.vmware.com/
                type: DirectoryOrCreate
              name: plugin-dir
            - hostPath:
                path: /var/lib/kubelet
                type: Directory
              name: pods-mount-dir
            - hostPath:
                path: /dev
              name: device-dir
        updateStrategy:
          type: RollingUpdate
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-node
    namespace: '${NAMESPACE}'
- apiVersion: v1
  data:
    data: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: vsphere-csi-controller
        namespace: kube-system
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: vsphere-csi-controller
        template:
          metadata:
            labels:
              app: vsphere-csi-controller
              role: vsphere-csi
          spec:
            containers:
            - args:
              - --v=4
              - --timeout=300s
              - --csi-address=$(ADDRESS)
              - --leader-election
              env:
              - name: ADDRESS
                value: /csi/csi.sock
              image: quay.io/k8scsi/csi-attacher:v3.0.0
              name: csi-attacher
              resources: {}
              volumeMounts:
              - mountPath: /csi
                name: socket-dir
            - env:
              - name: CSI_ENDPOINT
                value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
              - name: X_CSI_MODE
                value: controller
              - name: VSPHERE_CSI_CONFIG
                value: /etc/cloud/csi-vsphere.conf
              - name: LOGGER_LEVEL
                value: PRODUCTION
              - name: X_CSI_LOG_LEVEL
                value: INFO
              image: gcr.io/cloud-provider-vsphere/csi/release/driver:v2.1.0
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthz
                  port: healthz
                initialDelaySeconds: 10
                periodSeconds: 5
                timeoutSeconds: 3
              name: vsphere-csi-controller
              ports:
              - containerPort: 9808
                name: healthz
                protocol: TCP
              resources: {}
              volumeMounts:
              - mountPath: /etc/cloud
                name: vsphere-config-volume
                readOnly: true
              - mountPath: /var/lib/csi/sockets/pluginproxy/
                name: socket-dir
            - args:
              - --csi-address=$(ADDRESS)
              env:
              - name: ADDRESS
                value: /var/lib/csi/sockets/pluginproxy/csi.sock
              image: quay.io/k8scsi/livenessprobe:v2.1.0
              name: liveness-probe
              resources: {}
              volumeMounts:
              - mountPath: /var/lib/csi/sockets/pluginproxy/
                name: socket-dir
            - args:
              - --leader-election
              env:
              - name: X_CSI_FULL_SYNC_INTERVAL_MINUTES
                value: "30"
              - name: LOGGER_LEVEL
                value: PRODUCTION
              - name: VSPHERE_CSI_CONFIG
                value: /etc/cloud/csi-vsphere.conf
              image: gcr.io/cloud-provider-vsphere/csi/release/syncer:v2.1.0
              name: vsphere-syncer
              resources: {}
              volumeMounts:
              - mountPath: /etc/cloud
                name: vsphere-config-volume
                readOnly: true
            - args:
              - --v=4
              - --timeout=300s
              - --csi-address=$(ADDRESS)
              - --leader-election
              - --default-fstype=ext4
              env:
              - name: ADDRESS
                value: /csi/csi.sock
              image: quay.io/k8scsi/csi-provisioner:v2.0.0
              name: csi-provisioner
              resources: {}
              volumeMounts:
              - mountPath: /csi
                name: socket-dir
            dnsPolicy: Default
            serviceAccountName: vsphere-csi-controller
            tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
              operator: Exists
            volumes:
            - name: vsphere-config-volume
              secret:
                secretName: csi-vsphere-config
            - emptyDir: {}
              name: socket-dir
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-vsphere-csi-controller
    namespace: '${NAMESPACE}'
- apiVersion: v1
  data:
    data: |
      apiVersion: v1
      data:
        csi-migration: "false"
      kind: ConfigMap
      metadata:
        name: internal-feature-states.csi.vsphere.vmware.com
        namespace: kube-system
  kind: ConfigMap
  metadata:
    name: ${CLUSTER_NAME}-internal-feature-states.csi.vsphere.vmware.com
    namespace: '${NAMESPACE}'
parameters:
- description: namespace
  displayName: Namespace
  name: NAMESPACE
  required: false
  value: default
  valueType: string
- description: Cluster Owner
  displayName: Owner
  name: OWNER
  required: false
  value: admin
  valueType: string
- description: Cluster Name
  displayName: Cluster Name
  name: CLUSTER_NAME
  required: false
  value: clustername
  valueType: string
- description: Internal IP Cidr Block for Pods
  displayName: Cidr Block
  name: POD_CIDR
  required: false
  value: 0.0.0.0/0
  valueType: string
- description: vCenter Server IP
  displayName: VCSA IP
  name: VSPHERE_SERVER
  required: false
  value: 0.0.0.0
  valueType: string
- description: vCenter User Name
  displayName: User Name
  name: VSPHERE_USERNAME
  required: false
  value: example@domain.local
  valueType: string
- description: vCenter User Password
  displayName: User Password
  name: VSPHERE_PASSWORD
  required: false
  value: password
  valueType: string
- description: vCenter TLS Thumbprint
  displayName: Thumbprint
  name: VSPHERE_TLS_THUMBPRINT
  required: false
  value: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
  valueType: string
- description: vCenter Network Name
  displayName: Network Name
  name: VSPHERE_NETWORK
  required: false
  value: VM Network
  valueType: string
- description: vCenter DataCenter Name
  displayName: DataCenter Name
  name: VSPHERE_DATACENTER
  required: false
  value: Datacenter
  valueType: string
- description: vCenter DataStore Name
  displayName: DataStore Name
  name: VSPHERE_DATASTORE
  required: false
  value: datastore1
  valueType: string
- description: vCenter Folder Name
  displayName: Folder Name
  name: VSPHERE_FOLDER
  required: false
  value: vm
  valueType: string
- description: vCenter Resource Pool Name
  displayName: Resource Pool Name
  name: VSPHERE_RESOURCE_POOL
  required: false
  value: VM Resource
  valueType: string
- description: VM Disk Size
  displayName: Disk Size
  name: MASTER_DISK_SIZE
  required: false
  value: 25
  valueType: number
- description: VM Memory Size
  displayName: Memory Size
  name: MASTER_MEM_SIZE
  required: false
  value: 8192
  valueType: number
- description: Number of CPUs
  displayName: Number of CPUs
  name: MASTER_CPU_NUM
  required: false
  value: 2
  valueType: number
- description: Target Template Name
  displayName: Template Name
  name: VSPHERE_TEMPLATE
  required: false
  value: ubuntu-1804-kube-v1.17.3
  valueType: string
- description: Control Plane Endpoint IP
  displayName: Control Plane Endpoint IP
  name: CONTROL_PLANE_ENDPOINT_IP
  required: false
  value: 0.0.0.0
  valueType: string
- description: Kubernetes version
  displayName: Kubernetes version
  name: KUBERNETES_VERSION
  required: false
  value: v1.18.16
  valueType: string
- description: Number of Master node
  displayName: number of master nodes
  name: CONTROL_PLANE_MACHINE_COUNT
  required: false
  value: 3
  valueType: number
- description: Number of Worker node
  displayName: number of worker nodes
  name: WORKER_MACHINE_COUNT
  required: false
  value: 3
  valueType: number
- description: Password of VM
  displayName: Password of VM
  name: VM_PASSWORD
  required: false
  value: dG1heEAyMw==
  valueType: string
# - description: HyperAuth url for open id connect
#   displayName: HyperAuth URL
#   name: HyperAuthUrl
#   required: false
#   value: hyperauth.tmax.co.kr
#   valueType: string
# - description: HyperAuth tls Certifcate
#   displayName: HyperAuth Cert
#   name: HyperAuthCert
#   required: false
#   value: xxxx
#   valueType: string
recommend: true
shortDescription: Cluster template for CAPI provider vSphere
urlDescription: ""
---
# k8s 1.19용 cluster template
# cluster upgrade용 vspheremachinetemplate
apiVersion: tmax.io/v1
categories:
- CAPI
imageUrl: https://blogs.vmware.com/vsphere/files/2021/02/VMware-vSphere-Blog-Images-vSphere.jpg
kind: ClusterTemplate
metadata:
  name: capi-vsphere-upgrade-template-v1.19
objectKinds:
- VSphereMachineTemplate
objects:
- apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
  kind: VSphereMachineTemplate
  metadata:
    name: ${UPGRADE_TEMPLATE_NAME}
    namespace: '${NAMESPACE}'
  spec:
    template:
      spec:
        cloneMode: linkedClone
        datacenter: '${VSPHERE_DATACENTER}'
        datastore: '${VSPHERE_DATASTORE}'
        diskGiB: ${DISK_SIZE}
        folder: '${VSPHERE_FOLDER}'
        memoryMiB: ${MEM_SIZE}
        network:
          devices:
          - dhcp4: true
            networkName: '${VSPHERE_NETWORK}'
        numCPUs: ${CPU_NUM}
        resourcePool: '${VSPHERE_RESOURCE_POOL}'
        server: '${VSPHERE_SERVER}'
        template: '${VSPHERE_TEMPLATE}'
        thumbprint: ${VSPHERE_TLS_THUMBPRINT}
parameters:
- description: namespace
  displayName: Namespace
  name: NAMESPACE
  required: false
  value: default
  valueType: string
- description: upgrade template name
  displayName: upgrade template name
  name: UPGRADE_TEMPLATE_NAME
  required: false
  value: template-name
  valueType: string
- description: vCenter Server IP
  displayName: VCSA IP
  name: VSPHERE_SERVER
  required: false
  value: 0.0.0.0
  valueType: string
- description: vCenter TLS Thumbprint
  displayName: Thumbprint
  name: VSPHERE_TLS_THUMBPRINT
  required: false
  value: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
  valueType: string
- description: vCenter Network Name
  displayName: Network Name
  name: VSPHERE_NETWORK
  required: false
  value: VM Network
  valueType: string
- description: vCenter DataCenter Name
  displayName: DataCenter Name
  name: VSPHERE_DATACENTER
  required: false
  value: Datacenter
  valueType: string
- description: vCenter DataStore Name
  displayName: DataStore Name
  name: VSPHERE_DATASTORE
  required: false
  value: datastore1
  valueType: string
- description: vCenter Folder Name
  displayName: Folder Name
  name: VSPHERE_FOLDER
  required: false
  value: vm
  valueType: string
- description: vCenter Resource Pool Name
  displayName: Resource Pool Name
  name: VSPHERE_RESOURCE_POOL
  required: false
  value: VM Resource
  valueType: string
- description: VM Disk Size
  displayName: Disk Size
  name: DISK_SIZE
  required: false
  value: 25
  valueType: number
- description: VM Memory Size
  displayName: Memory Size
  name: MEM_SIZE
  required: false
  value: 8192
  valueType: number
- description: Number of CPUs
  displayName: Number of CPUs
  name: CPU_NUM
  required: false
  value: 2
  valueType: number
- description: Target Template Name
  displayName: Template Name
  name: VSPHERE_TEMPLATE
  required: false
  value: ubuntu-1804-kube-v1.19.6
  valueType: string
- description: Kubernetes version
  displayName: Kubernetes version
  name: KUBERNETES_VERSION
  required: false
  value: v1.19.6
  valueType: string
recommend: true
shortDescription: Cluster template for CAPI provider vSphere upgrade
urlDescription: ""